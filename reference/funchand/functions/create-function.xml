<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 39752929cd4ab78db8a7310dfb328444c558df99 Maintainer: onurozgurozkan Status: ready -->
<refentry xml:id="function.create-function" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>create_function</refname>
  <refpurpose>Kod dizgesini değerlendirerek dinamik olarak bir işlev oluşturur</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &warn.deprecated.function-7-2-0.removed-8-0-0;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>create_function</methodname>
   <methodparam><type>string</type><parameter>bağımsız değişkenler</parameter></methodparam>
   <methodparam><type>string</type><parameter>kod</parameter></methodparam>
  </methodsynopsis>
  <para>
   Verilen bağımsız değişkenlerden dinamik olarak bir işlev oluşturur ve onun için
   eşsiz bir isim döndürür.
  </para>
  <caution>
   <para>
    Bu işlev dahili olarak bir <function>eval</function> çağrısı yapar, bu
    nedenle <function>eval</function> ile aynı güvenlik sorunlarına sahiptir.
    Ayrıca, oluşturulan işlev küresel bağlamda ve serbest bırakılamaz
    olduğundan kötü başarım ve bellek kullanımı özellikleri de vardır.
   </para>
   <para>
    Bu işlev yerine yerleşik bir <link linkend="functions.anonymous">isimsiz
    işlev</link> kullanılmalıdır.
   </para>
  </caution>
</refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   Normalde bu bağımsız değişkenleri
   <link linkend="language.types.string.syntax.single">tek tırnaklı
   dizgeler</link> olarak aktarmanız önerilir.
   <link linkend="language.types.string.syntax.double">Çift tırnaklı
   dizgeler</link> kullanılırsa, koddaki değişken adlarının
   <literal>\$somevar</literal> örneğindeki gibi dikkatli bir şekilde
   öncelenmesi gerekecektir.
   <variablelist>
    <varlistentry>
     <term><parameter>bağımsız değişkenler</parameter></term>
     <listitem>
      <para>
       Tek tırnaklı dizge olarak, işlevin bağımsız değişkenleri.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>kod</parameter></term>
     <listitem>
      <para>
       İşlevin kodu.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Başarı durumunda bir dizge olarak işleve eşsiz bir isim, aksi takdirde
   &false; döndürür. İşlev isminin yazdırılamayan bir karakter
   (<literal>"\0"</literal>) içerdiği unutulmamalıdır, bu nedenle bu isim
   yazdırılırken veya başka bir dizgeye eklenirken dikkatli olunmalıdır.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>-
     <function>create_function</function> veya isimsiz işlevlerle ile bir
     işlevin dinamik olarak oluşturulması
    </title>
    <para>
     Çalışma anında toplanan bilgileri kullanarak yeni bir işlev
     oluşturmak için dinamik olarak oluşturulmuş bir işlev kullanabilirsiniz.
     Önce, <function>create_function</function> kullanarak:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$işlev = create_function('$a,$b', 'return "ln($a) + ln($b) = " . log($a * $b);');
echo $işlev(2, M_E) . "\n";
?>
]]>
    </programlisting>
    <para>
     Ve, <link linkend="functions.anonymous">isimsiz işlev</link> kullanarak;
     dikkat edilirse, kod ve bağımsız değişkenler artık dizgelerin içinde değildir:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$newfunc = function($a,$b) { return "ln($a) + ln($b) = " . log($a * $b); };
echo $newfunc(2, M_E) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
ln(2) + ln(2.718281828459) = 1.6931471805599
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- <function>create_function</function> işlevi  veya isimsiz
     işlevlerle bir genel işlem işlevi oluşturmak
    </title>
    <para>
     Diğer bir kullanım, bir bağımsız değişken listesi üzerinde belli işlemler yapan
     genel bir işleyici işlev olabilir:
  </para>
    <programlisting role="php">
<![CDATA[
<?php
function process($var1, $var2, $farr)
{
    foreach ($farr as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// Birkaç matematik işlevi oluşturalım
$farr = array(
    create_function('$x,$y', 'return "biraz trig: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "bir hipotenüs: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', 'if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}'),
    create_function('$a,$b', "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);"),
    create_function('$a,$b', 'if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }')
);
echo "\nBirinci dinamik işlev grubumuz\n";
echo "bağımsız değişkenler: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// birkaç tane de dizge işlevi oluşturalım
$garr = array(
    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
        've \"$b\"\n**  (ilk üç karaktere bakarak) Bak bu ikisi aynı!";'),
    create_function('$a,$b', 'return "CRCs: " . crc32($a) . ", ".crc32($b);'),
    create_function('$a,$b', 'return "benzerlik(a,b) = " . similar_text($a, $b, $p) . "($p%)";')
);
echo "\nİkinci dinamik işlev grubumuz\n";
process("Gün yavaş yavaş ışıyordu", "Gün aydınlanıyordu", $garr);
?>
]]>
    </programlisting>
    <para>
     Aynı kodu bu kez <link linkend="functions.anonymous">isimsiz
     işlevlerle</link> oluşturuluyor. Dikkat edilirse, koddaki değişken
     isimleri artık dizge içinde olmadığından öncelenmemiştir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
function process($var1, $var2, $farr)
{
    foreach ($farr as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// Birkaç matematik işlevi oluşturalım
$farr = array(
    function($x,$y) { return "biraz trig: ".(sin($x) + $x*cos($y)); },
    function($x,$y) { return "hipotenüs: ".sqrt($x*$x + $y*$y); },
    function($a,$b) { if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;} },
    function($a,$b) { return "min(b^2+a, a^2,b) = " . min($a*$a+$b, $b*$b+$a); },
    function($a,$b) { if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; } }
);

echo "\nBirinci dinamik işlev grubumuz\n";
echo "bağımsız değişkenler: 2.3445, M_PI\n";
process(2.3445, M_PI, $farr);

// birkaç tane de dizge işlevi oluşturalım
$garr = array(
    function($b,$a) { if (strncmp($a, $b, 3) == 0) return "** \"$a\" " .
        "ve \"$b\"\n**  (ilk üç karaktere bakarak) Bak bu ikisi aynı!"; },
    function($a,$b) { return "CRCs: " . crc32($a) . ", ".crc32($b); },
    function($a,$b) { return "benzerlik(a,b) = " . similar_text($a, $b, $p) . "($p%)"; }
);echo "\nİkinci dinamik işlev grubumuz\n";
process("Gün yavaş yavaş ışıyordu", "Gün aydınlanıyordu", $garr);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Birinci dinamik işlev grubumuz
bağımsız değişkenler: 2.3445, M_PI
biraz trig: -1.6291725057799
hipotenüs: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a)/b = 0.27122299212594

İkinci dinamik işlev grubumuz
** "Gün aydınlanıyordu" ve "Gün yavaş yavaş ışıyordu"
**  (ilk üç karaktere bakarak) Bak bu ikisi aynı!
CRCs: 2226456759, 3176276925
benzerlik(a,b) = 15(58.823529411765%)
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Dinamik işlevlerin geriçağırım işlevlerinde kullanımı</title>
  <para>
   Şüphesiz, dinamik işlevlerin asıl kullanım amacı geriçağırım
   işlevleri oluşturmaktır. <function>array_walk</function> ve
   <function>usort</function> işlevlerini kullanan örnekler:
  </para>
    <programlisting role="php">
<![CDATA[
<?php

$av = array("işte ", "bir ", "bu ", "şu ");
array_walk($av, create_function('&$v,$k', '$v = $v . "mango";'));
print_r($av);

?>
]]>
    </programlisting>
    <para>
     <link linkend="functions.anonymous">İsimsiz işlev</link> kullanarak:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$av = array("işte ", "bir ", "bu ", "şu ");
array_walk($av, function(&$v,$k) { $v = $v . "mango"; });
print_r($av);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => işte mango
    [1] => bir mango
    [2] => bu mango
    [3] => şu mango
)
]]>
    </screen>
    <para>
     Bir dizgeyi <function>create_function</function> ile uzundan kısaya
     sıralamak:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sv = array("kısa", "daha uzun", "daha da uzun", "daha daha uzun");
echo "Özgün:\n";
print_r($sv);
echo "Sıralı:\n";
usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);
?>
]]>
    </programlisting>
    <para>
     <link linkend="functions.anonymous">İsimsiz işlev</link> kullanarak:
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$sv = array("kısa", "daha uzun", "daha da uzun", "daha daha uzun");
echo "Özgün:\n";
print_r($sv);
echo "Sıralı:\n";
usort($sv, function($a,$b) { return strlen($b) - strlen($a); });
print_r($sv);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Özgün:
Array
(
    [0] => kısa
    [1] => daha uzun
    [2] => daha da uzun
    [3] => daha daha uzun
)
Sıralı:
Array
(
    [0] => daha daha uzun
    [1] => daha da uzun
    [2] => daha uzun
    [3] => kısa
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><link linkend="functions.anonymous">İsimsiz işlevler</link></member>
   </simplelist>
   </para>
  </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
