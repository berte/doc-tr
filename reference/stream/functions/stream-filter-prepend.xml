<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: e41806c30bf6975e452c0d4ce35ab0984c2fa68c Maintainer: nilgun Status: ready -->
<refentry xml:id="function.stream-filter-prepend" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_prepend</refname>
  <refpurpose>Süzgeç zincirinin başına bir süzgeç ekler</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>stream_filter_prepend</methodname>
   <methodparam><type>resource</type><parameter>akım</parameter></methodparam>
   <methodparam><type>string</type><parameter>süzgeç</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>oku_yaz</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>bağımsız değişkenler</parameter></methodparam>
  </methodsynopsis>
  <para>
   <parameter>akım</parameter> akımına ekli süzgeçler listesine
   <parameter>süzgeç</parameter> isimli süzgeci ekler.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>akım</parameter></term>
     <listitem>
      <para>
       Hedef akım.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>süzgeç</parameter></term>
     <listitem>
      <para>
       Eklenecek süzgecin ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>oku_yaz</parameter></term>
     <listitem>
      <para>
       <function>stream_filter_prepend</function> işlevi öntanımlı olarak,
       dosya okumak için  (<literal>r</literal> veya <literal>r+</literal>
       kipi) açılmışsa süzgeci <literal>okuma süzgeci zinciri</literal>ne
       ekler. Eğer dosya yazmak için (<literal>w</literal>,
       <literal>a</literal> veya <literal>w+</literal>, <literal>a+</literal>
       kipi) açılmışsa, süzgeç <literal>yazma süzgeci zinciri</literal>ne de
       eklenir. Bu davranışı geçersiz kılmak için bağımsız değişkene
       <constant>STREAM_FILTER_READ</constant>,
       <constant>STREAM_FILTER_WRITE</constant> ve/veya
       <constant>STREAM_FILTER_ALL</constant> sabitleri de aktarılabilir. Bu
       bağımsız değişkenin kullanıldığı bir örneği
       <function>stream_filter_append</function> işlevinde görebilirsiniz.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>bağımsız değişkenler</parameter></term>
     <listitem>
      <para>
       Süzgeç, belirtilen <parameter>bağımsız değişkenler</parameter> ile listenin
       <emphasis>başlangıcına</emphasis> eklenir ve akım işlemlerinde ilk
       çağrılan süzgeç olur. Süzgeci listenin sonuna eklemek için
       <function>stream_filter_append</function> işlevini kullanın.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>stream_filter_remove</function> çağrısına aktarılmak üzere bir
   özkaynak döndürür,&return.falseforfailure;.
  </para>
  <para>
   Belirtilen <parameter>akım</parameter> bir özkaynak değilse veya
   <parameter>süzgeç</parameter> konumlanamazsa &false; döner.
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <title>Özel (kullanıcı) süzgeçlerini kullanırken</title>
   <simpara>
    İstenen kullanıcı süzgecini <parameter>süzgeç</parameter> olarak tanıtmak
    için ilk olarak <function>stream_filter_register</function> çağrılmalıdır.
   </simpara>
  </note>
  <note>
   <simpara>
    Henüz okunmamış veri dahili tamponlarda tutulurken akım verisi
    özkaynaklardan (hem yerel hem de uzak) büyük kümeler halinde okunur.
    Süzgeç zincirinin başına yeni bir süzgeç eklendiğinde, dahili
    tamponlardaki süzgeçlerden geçirilmemiş veriler yeni süzgeçten
    geçirilecektir ancak evvelce diğer süzgeçlerden geçirilmiş veriler yeni
    süzgeçten geçirilmeyecektir. Bu davranış,yeni süzgeci zincirin sonuna
    ekleyen <function>stream_filter_append</function> işlevinden bu yönüyle
    farklıdır.
   </simpara>
  </note>
  <note>
   <simpara>
    Bir süzgeç hem okuma hem de yazma amacıyla eklendiğinde iki örneği
    oluşturulur. Her iki süzgeç özkaynağını ayırmak için
    <function>stream_filter_prepend</function> işlevi
    <constant>STREAM_FILTER_READ</constant> ve
    <constant>STREAM_FILTER_WRITE</constant> ile ayrı ayrı çağrılmalıdır.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>stream_filter_register</function></member>
   <member><function>stream_filter_append</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
