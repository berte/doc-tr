<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 855bfee2f3db70d7dbb4c60c7c4a4efa567f1c60 Maintainer: nilgun Status: ready -->
<refentry xml:id="sqlite3.createaggregate" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>SQLite3::createAggregate</refname>
  <refpurpose>Toparlayıcı bir SQL işlevi olarak kullanılmak üzere bir PHP
  işlevini kayda geçirir</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="SQLite3">
   <modifier>public</modifier> <type>bool</type><methodname>SQLite3::createAggregate</methodname>
   <methodparam><type>string</type><parameter>isim</parameter></methodparam>
   <methodparam><type>callable</type><parameter>sekme_işlevi</parameter></methodparam>
   <methodparam><type>callable</type><parameter>son_işlev</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>değş_sayısı</parameter><initializer>-1</initializer></methodparam>
  </methodsynopsis>
  <para>
   SQL deyimlerinde toparlayıcı bir SQL işlevi olarak kullanılmak üzere bir
   PHP işlevini veya bir kullanıcı tanımlı işlevi kayda geçirir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>isim</parameter></term>
     <listitem>
      <para>
       Oluşturulacak veya yeniden tanımlanacak toparlayıcı SQL işlevinin ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sekme_işlevi</parameter></term>
     <listitem>
      <para>
       Sonuç kümesinin her satırı için çalıştırılacak geriçağırım işlevinin
       ismi. Bu geriçağırım işlevi sonucu biriktirmeli ve toparlayıcı bir
       bağlamda saklamalıdır.
      </para>
      <para>
       Bu işlev şöyle tanımlanmalıdır:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>sekme_işlevi</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>bağlam</parameter></methodparam>
        <methodparam><type>int</type><parameter>satır_num</parameter></methodparam>
        <methodparam><type>mixed</type><parameter>değer</parameter></methodparam>
        <methodparam rep="repeat"><type>mixed</type><parameter>değerler</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>bağlam</parameter></term>
         <listitem>
          <para>
           İlk satır için &null;; sonraki satırlarda
           <replaceable>sekme_işlevi</replaceable>nden evvelce dönmüş değer.
           Bunu toparlayıcı bağlamı oluşturmakta kullanmalısınız.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>satır_num</parameter></term>
         <listitem>
          <para>
           İşlenen satır numarası.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>değer</parameter></term>
         <listitem>
          <para>
           Toparlayıcı bağlama aktarılacak ilk bağımsız değişken.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>değerler</parameter></term>
         <listitem>
          <para>
           Toparlayıcı bağlama aktarılacak diğer bağımsız değişkenler.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       Bu işlevin dönüş değeri ardından çağrılacak sekme_işlevi veya
       son_işlevin <parameter>bağlam</parameter> bağımsız değişkeninde
       kullanılmalıdır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>son_işlev</parameter></term>
     <listitem>
      <para>
       Veri toplama işlemi bittikten sonra çalıştırılacak geriçağırım işlevinin
       ismi. Tüm satırlar işlendikten sonra, bu işlev çağrılmalı ve ardından
       verileri toparlama bağlamından alıp sonucu döndürmelidir. Bu geri
       çağırım işlevi, SQLite tarafından bilinen türde bir değer (yani değişmez
       bir değer) döndürmelidir.
      </para>
      <para>
       Bu işlev şöyle tanımlanmalıdır:
       <methodsynopsis>
        <type>mixed</type><methodname><replaceable>son_işlev</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>bağlam</parameter></methodparam>
        <methodparam><type>int</type><parameter>satır_num</parameter></methodparam>
       </methodsynopsis>
       <variablelist>
        <varlistentry>
         <term><parameter>bağlam</parameter></term>
         <listitem>
          <para>
           Son <replaceable>sekme_işlevi</replaceable>nden dönen değer.
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><parameter>satır_num</parameter></term>
         <listitem>
          <para>
           Daima <literal>0</literal>.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
       Bu işlevin dönüş değeri toparlayıcı için dönüş değeri olarak kullanılır.
       </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değş_sayısı</parameter></term>
     <listitem>
      <para>
       SQL işlevinin alacağı bağımsız değişken sayısı. Negatif bir sayı belirtilirse
       SQL işlevi herhangi bir sayıda bağımsız değişken alabilir demektir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Toparlayıcı başarıyla oluşturulmuşsa &true;,&return.falseforfailure;.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- en_uzun toparlayıcı işlev örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
$data = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$db = new SQLite3(':memory:');
$db->exec("CREATE TABLE strings(a)");
$insert = $db->prepare('INSERT INTO strings VALUES (?)');
foreach ($data as $str) {
    $insert->bindValue(1, $str);
    $insert->execute();
}
$insert = null;

function en_uzun_sekme($baglam, $str_num, $dizge)
{
    if (strlen($dizge) > $baglam) {
        $baglam = strlen($dizge);
    }
    return $baglam;
}

function en_uzun_son($baglam, $str_num)
{
    return $baglam === null ? 0 : $baglam;
}

$db->createAggregate('en_uzun', 'en_uzun_sekme', 'en_uzun_son');

var_dump($db->querySingle('SELECT en_uzun(a) from strings'));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
int(5)
]]>
    </screen>
   </example>
  </para>
  <para>
   Bu örnekte, tablonun sütunlarından birindeki en uzun dizenin uzunluğunu
   hesaplayacak bir toparlama işlevi oluşturulmaktadır. Her satır için
   <literal>en_uzun_sekme</literal> işlevi çağrılmakta ve bir
   <literal>$baglam</literal> bağımsız değişkenine aktarılmaktadır.
   <literal>$baglam</literal> bağımsız değişkeni, diğer PHP değişkenleri gibidir ve
   bir diziyi veya hatta bir nesne değerini tutacak şekilde ayarlanabilir. Bu
   örnekte, bulunan en büyük uzunluğu tutmak için kullanılmaktadır.
   <literal>$dizge</literal> önceki en uzun dizgeden daha uzunsa,
   <literal>$baglam</literal> bağımsız değişkeni bu yeni değeri tutacak şekilde
   güncellenmektedir.
  </para>
  <para>
   Tüm satırlar işlendikten sonra SQLite, toparlama sonucunu belirlemek için
   <literal>en_uzun_son</literal> işlevini çağırır. Burada,
   <literal>$baglam</literal>da bulunan verilere dayanarak bir tür hesaplama
   yapılabilir. Yine de bu basit örnekte, sorgu ilerledikçe sonuç
   hesaplanmakta, bu nedenle bağlam değerini döndürmek yeterli olmaktadır.
  </para>
  <tip>
   <para>
    SQLite'ın sorguyu işlemek için çok fazla bellek kullanmasına neden
    olacağından, değerlerin bir kopyasının bağlamda saklanması ve ardından
    bunların en sonda işlenmesi ÖNERİLMEZ. Her biri 32 bayt uzunluğunda bir
    dizge içeren bir milyon satır...
   </para>
  </tip>
  <tip>
   <para>
    <methodname>SQLite3::createAggregate</methodname> yöntemi SQLite'ın dahili
    SQL işlevlerini geçersiz kılmak için kullanılabilir.
   </para>
  </tip>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
