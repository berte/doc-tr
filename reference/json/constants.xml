<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 8cdc6621f9826d04abc3e50438c010804d7e8683 Maintainer: ecamalan Status: ready -->
<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Aşağıdaki hata türü sabitleri, ya <function>json_last_error</function>
  tarafından döndürülür ya da <classname>JsonException</classname> sınıfı
  altında bir <varname>code</varname> olarak saklanır.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-error-none">
   <term>
    <constant>JSON_ERROR_NONE</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Hata bulunamadı.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-depth">
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Azami yığın boyutu aşıldı.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-state-mismatch">
    <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Kiplerin eşleşmemesi veya alttan taşma hatalarında oluşur.

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-ctrl-char">
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Denetim karakteri hatası, muhtemelen yanlış kodlanmış.

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-syntax">
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Sözdizimi hatası.

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf8">
   <term>
    <constant>JSON_ERROR_UTF8</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     UTF-8 karakter kodlama hatası, muhtemelen yanlış kodlanmış.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-recursion">
   <term>
    <constant>JSON_ERROR_RECURSION</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     <function>json_encode</function> işlevine iç içe başvurular içeren nesne
     veya dizi aktarılmış. <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>
     seçeneği belirtilirse iç içe başvuruların bulunduğu yerlere &null;
     yerleştirilir.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-inf-or-nan">
   <term>
    <constant>JSON_ERROR_INF_OR_NAN</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     <function>json_encode</function> işlevine
     <link linkend="language.types.float.nan"><constant>NAN</constant></link>
     veya <link linkend="function.is-infinite"><constant>INF</constant></link>
     içeren bir değer aktarılmış.
     <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> seçeneği belirtilirse bu
     özel sayıların yerine <literal>0</literal>yerleştirilir.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-unsupported-type">
   <term>
    <constant>JSON_ERROR_UNSUPPORTED_TYPE</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     <function>json_encode</function> işlevine desteklenmeyen türde
     (<type>resource</type> gibi) bir değer aktarılmış.
     <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> seçeneği belirtilirse
     desteklenmeyen değerin yerine &null; yerleştirilir.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-invalid-property-name">
   <term>
    <constant>JSON_ERROR_INVALID_PROPERTY_NAME</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     Bir JSON nesnesi bir PHP nesnesine dönüştürülürken
     <function>json_decode</function> işlevine aktarılan dizede
     \u0000 karakteriyle başlayan bir anahtar vardı.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-error-utf16">
   <term>
    <constant>JSON_ERROR_UTF16</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     <function>json_decode</function> işlevine aktarılan JSON dizesinde
     bulunan unicode öncelemesi içindeki eşleştirilmemiş tekli UTF-16 vekil.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Aşağıdaki sabitler <function>json_decode</function> için seçenekler
  oluşturmak üzere birleştirilebilir.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-bigint-as-string">
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     Geniş tamsayıları özgün dize değerlerine dönüştürür.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-object-as-array">
   <term>
    <constant>JSON_OBJECT_AS_ARRAY</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     JSON nesneleri PHP dizisine dönüştürür. Bu seçenek,
     <function>json_decode</function> işlevine ikinci bağımsız değişken olarak
     &true; atanarak da eklenebilir.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Aşağıdaki sabitler <function>json_encode</function> için seçenekler
  oluşturmak üzere birleştirilebilir.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-hex-tag">
   <term>
    <constant>JSON_HEX_TAG</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Bütün &lt; ve &gt; karakterleri \u003C ve \u003E karakterlerine
     dönüştürülürler.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-amp">
   <term>
    <constant>JSON_HEX_AMP</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Bütün &amp; karakterleri \u0026 karakterlerine dönüştürülürler.

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-apos">
   <term>
    <constant>JSON_HEX_APOS</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Bütün ' karakterleri \u0027 karakterlerine dönüştürülürler.

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-hex-quot">
   <term>
    <constant>JSON_HEX_QUOT</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Bütün " karakterleri \u0022 dönüştürülürler.

    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-force-object">
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     İlişkisel olmayan dizi kullanıldığında çıktıları dizi yerine nesne
     olmaktadır. Özellikle dizi boş ve çıktı nesne olarak bekleniyorsa
     çok kullanışlıdır.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-numeric-check">
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Sayısal dizgileri sayı olarak ele alınır.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-pretty-print">
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Dönen veriyi biçimlemek için boşluk karakteri kullanılır.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-slashes">
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     <literal>/</literal> öncelenmez.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-unicode">
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Çokbaytlı Unicode karakteri sayısal değerleriyle kodlar. (\uXXXX biçimi
     öntanımlıdır).
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-partial-output-on-error">
   <term>
    <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     Başarısız olmak yerine kodlanamayan bazı değerler değiştirilir.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-preserve-zero-fraction">
   <term>
    <constant>JSON_PRESERVE_ZERO_FRACTION</constant>
     (&integer;)
   </term>
   <listitem>
    <simpara>
     &float; değerlerin daima kayan noktalı değerler olarak kodlanmasını
     sağlar.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-unescaped-line-terminators">
   <term>
    <constant>JSON_UNESCAPED_LINE_TERMINATORS</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     <constant>JSON_UNESCAPED_UNICODE</constant> sağlandığı takdirde satırsonu
     karakterleri öncelenmeden saklanır; PHP 7.1 öncesinde aynı davranışı
     sağlamak için bu sabit gerekmiyordu.
     PHP 7.1.0 sürümünden itibaren kullanılabilir.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>

 <para>
  Aşağıdaki sabitler <function>json_encode</function> ve
  <function>json_decode</function> için seçenekler
  oluşturmak üzere birleştirilebilir.
 </para>
 <variablelist>
  <varlistentry xml:id="constant.json-invalid-utf8-ignore">
   <term>
    <constant>JSON_INVALID_UTF8_IGNORE</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     Geçersiz UTF-8 karakterleri yoksayılır.
     PHP 7.2.0 sürümünden itibaren kullanılabilir.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-invalid-utf8-substitute">
   <term>
    <constant>JSON_INVALID_UTF8_SUBSTITUTE</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     Geçersiz UTF-8 karakterleri \0xfffd karakterine dönüştürülür.
     PHP 7.2.0 sürümünden itibaren kullanılabilir.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry xml:id="constant.json-throw-on-error">
   <term>
    <constant>JSON_THROW_ON_ERROR</constant>
    (&integer;)
   </term>
   <listitem>
    <simpara>
     Bir hata oluşursa küresel hata durumunu
     <function>json_last_error</function> ve
     <function>json_last_error_msg</function> ile ayarlamak yerine bir
     <classname>JsonException</classname> atanır.
     <constant>JSON_PARTIAL_OUTPUT_ON_ERROR</constant> sabiti
     <constant>JSON_THROW_ON_ERROR</constant> sabitine göre önceliklidir.
     PHP 7.3.0 sürümünden itibaren kullanılabilir.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

