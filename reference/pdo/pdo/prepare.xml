<?xml version='1.0' encoding='utf-8'?>
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: nilgun Status: ready -->
<refentry xml:id="pdo.prepare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::prepare</refname>
  <refpurpose>Çalıştırılmak üzere bir deyimi hazırlar ve bir deyim nesnesi olarak döndürür</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
<methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>PDOStatement</type><type>false</type></type><methodname>PDO::prepare</methodname>
   <methodparam><type>string</type><parameter>deyim</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>seçenekler</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>

  <para>
   <methodname>PDOStatement::execute</methodname> yöntemi ile çalıştırılmak üzere
   bir SQL deyimi hazırlar. Deyim şablonu sıfır veya daha fazla sayıda birer
   isimle (:isim) veya birer soru imi (?) ile ifade edilen bağımsız değişken
   içerebilir. Deyimin çalıştırılması sırasında bu bağımsız değişkenlere farklı
   değerler atanarak aynı deyim defalarca kullanılabilir. Aynı deyim şablonunda
   hem isimli hem de soru imli bağımsız değişkenleri kullanamazsınız. İkisinden
   birini seçmek zorundasınız. Herhangi bir kullanıcı girişini bağlamak için
   bu bağımsız değişkenleri kullanın, kullanıcı girişini doğrudan sorguya dahil
   etmeyin.
  </para>
  <para>
   <methodname>PDOStatement::execute</methodname> işlevinde aktaracağınız her
   değer için eşsiz bir bağımsız değişken imleyici belirtmelisiniz.
   Öykünme kipi açık olmadığı sürece, hazırlanmış bir ifadede aynı ismi birden
   fazla isimli bağımsız değişken işaretçisinde kullanamazsınız.
  </para>
  <note>
   <para>
    Bağımsız değişken işaretçileri yalnızca eksiksiz bir değişmez veriyi temsil
    edebilir. Ne değişmez parçasının, ne anahtar sözcük, ne tanımlayıcı ne de
    herhangi bir keyfi sorgu parçasının bağımsız değişken kullanılarak bağlanması
    mümkün değildir. Örneğin, bir SQL ifadesinin IN() yan tümcesinde tek bir
    bağımsız değişkene birden çok değer bağlayamazsınız.
   </para>
  </note>
  <para>
   Bir SQL deyiminin farklı değerlerle defalarca çalıştırılmak üzere
   <methodname>PDO::prepare</methodname> ve
   <methodname>PDOStatement::execute</methodname> yöntemlerine aktarılması, bu SQL
   deyimiyle ilgili sorgu planının ve temel verilerin müzakere edilmek üzere
   sürücü tarafından istemci ve/veya sunucu tarafında önbelleklemesiyle
   uygulamanızın başarımını yükseltecek en iyilemelerin yapılması mümkün olur.
   Ayrıca, <methodname>PDO::prepare</methodname> ve
   <methodname>PDOStatement::execute</methodname> işlevlerinin kullanımı,
   bağımsız değişkenlerin elle öncelenmesi gereğini ortadan kaldırarak SQL zerk
   saldırılarını engellemeye yardımcı olur.
  </para>
  <para>
   Bağımsız değişkenli hazır deyimlerin değerlerle ilişkilendirilmesi işlemini
   desteklemeyen sürücüler için PDO bu işlemi taklit eder. Ayrıca sürücü
   isimli ve soru imli bağımsız değişken aktarım tarzlarından yalnız birini
   destekliyorsa PDO diğer tarzı da taklit eder.
  </para>
  <note>
   <simpara>
    Öykünülmüş hazırlanmış ifadeler ve isimli veya soru işareti tarzı
    bağımsız değişkenlerinin yeniden yazılması için kullanılan çözümleyici, tek ve
    çift tırnaklar için standart olmayan tersbölülü öncelemeyi destekler. Bu,
    bir tersbölü ile öncelenmiş sonlandırma tırnaklarında bu kullanımın
    desteklenmediği anlamına gelir, bu da bağımsız değişkenlerin yanlış algılanmasına
    neden olarak hazırlanan ifadenin yürütüldüğünde başarısız olmasına sebep
    olabilir. Çözüm, bu tür SQL sorguları için öykünülmüş hazırlıklar
    kullanmamak ve sürücü tarafından yerel olarak desteklenen bir bağımsız değişken
    tarzı kullanarak bağımsız değişkenlerin yeniden yazılmasını önlemektir.
   </simpara>
  </note>
  <para>
   PHP 7.4.0 ve sonrasında, soru imleri kendileri ile öncelenebiliyor. Yani,
   <literal>??</literal> dizgesi artık veritabanına <literal>?</literal>
   dizgesi olartak gönderiliyor.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>deyim</parameter></term>
     <listitem>
      <para>
       Hedef veritabanı sunucusu için geçerli bir SQL deyimi şablonu olmalıdır.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>seçenekler</parameter></term>
     <listitem>
      <para>
       Bu yöntemden döndürülen <classname>PDOStatement</classname> nesnesi
       için atanacak öznitelik değerlerini isim=&gt;değer çiftleri halinde
       içeren bir dizi. Çoğunlukla kaydırılabilen bir gösterici isteği için
       <literal>PDO::CURSOR_SCROLL</literal> özniteliğine
       <literal>PDO::ATTR_CURSOR</literal> değerini atamakta kullanılır. Bazı
       sürücülerin deyimin hazırlanması aşamasında atanabilen sürücüye özgü
       öznitelikleri vardır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Veritabanı sunucusu deyimi başarıyla hazırlayabilmişse
   <methodname>PDO::prepare</methodname> bir
   <classname>PDOStatement</classname> nesnesi döndürür; aksi takdirde ya bir
   <classname>PDOException</classname> yavrulanır veya işlev &false; döndürür
   (<link linkend="pdo.error-handling">hata işleme</link>ye bağımlı olarak).
  </para>
  <note>
   <para>
    Öykünülmüş hazır deyimler için veritabanı sunucusuyla müzakere
    yapılmadığından <methodname>PDO::prepare</methodname> deyim üzerinde bir
    sınama yapmaz.
   </para>
  </note>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- İsimli bağımsız değişkenli SQL deyim şablonu</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Değerleri bir dizi olarak aktaracağımız bir deyim hazırlayalım */
$sql = 'SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour';
$sth = $dbh->prepare($sql, [PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY]);
$sth->execute(['calories' => 150, 'colour' => 'red']);
$red = $sth->fetchAll();
/* Dizi anahtarları ":" ile de öncelenebiliyor (seçimlik) */
$sth->execute([':calories' => 175, ':colour' => 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>- Soru imli SQL deyim şablonu</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Değerleri bir dizi olarak aktaracağımız bir deyim hazırlayalım */
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->execute([150, 'red']);
$red = $sth->fetchAll();
$sth->execute([175, 'yellow']);
$yellow = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>- Soru imi öncelemeli SQL deyim şablonu</title>
    <programlisting role="php">
<![CDATA[
<?php
/* Dikkat: Bu sadece PostgreSQL veritabanlarında geçerlidir */
$sth = $dbh->prepare('SELECT * FROM issues WHERE tag::jsonb ?? ?');
$sth->execute(['feature']);
$featureIssues = $sth->fetchAll();
$sth->execute(['performance']);
$performanceIssues = $sth->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::exec</methodname></member>
    <member><methodname>PDO::query</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
