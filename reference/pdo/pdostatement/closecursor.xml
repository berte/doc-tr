<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 082ddc19f53e6e254010de1a1fbbe485ff744ec1 Maintainer: nilgun Status: ready -->
<refentry xml:id="pdostatement.closecursor" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::closeCursor</refname>
  <refpurpose>Göstericiyi kapatarak deyimin tekrar çalıştırılabilmesini sağlar
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
<methodsynopsis role="PDOStatement">
   <modifier>public</modifier>
   <type>bool</type><methodname>PDOStatement::closeCursor</methodname>
   <void/>
  </methodsynopsis>
  <para>
   <methodname>PDOStatement::closeCursor</methodname> yöntemi sunucu bağlantısını
   serbest bırakarak, mevcut deyimin durumunu değiştirmeden tekrar
   çalıştırılabilmesinin yanında başka SQL deyimlerinin çalıştırılabilmesini
   de mümkün kılar.
  </para>
  <para>
   Evvelce çalıştırılmış bir PDOStatement nesnesinden henüz alınmamış
   satırların olduğu durumda bazı sürücüler bir PDOStatement nesnesinin daha
   çalıştırılmasına izin vermezler. Bu yöntem bu tür sürücülerde yararlıdır.
   Sürücünüz böyle bir sürücü ise sorun sıra dışı bir hata olarak kendini
   gösterir.
  </para>
  <para>
   <methodname>PDOStatement::closeCursor</methodname> yöntemi ya sürücüye özel
   isteğe bağlı (azami verimlilikte) bir yöntemdir ya da genel amaçlı bir PDO
   son çare yöntemidir. Genel amaçlı yöntem aşağıdaki PHP koduna eşdeğer bir
   işlem yürütür:
   <programlisting role="php">
<![CDATA[
<?php
do {
    while ($stmt->fetch())
        ;
    if (!$stmt->nextRowset())
        break;
} while (true);
?>
]]>
   </programlisting>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <methodname>PDOStatement::closeCursor</methodname> örneği</title>
    <para>
     Aşağıdaki örnekte, <varname>$stmt</varname> PDOStatement nesnesi çok
     sayıda satır döndürdüğü halde uygulama sadece ilk satırı almakta ve
     PDOStatement nesnesini satırları henüz alınmamış durumda bırakmaktadır.
     Uygulamanın tüm veritabanı sürücüleri ile çalışmasını sağlamak için
     <varname>$stmt</varname> veya <varname>$otherStmt</varname> PDOStatement
     nesnesi çalıştırılmadan önce bir
     <methodname>PDOStatement::closeCursor</methodname> çağrısı yapması gerekir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
/* Bir PDOStatement nesnesi oluşturalım */
$stmt = $dbh->prepare('SELECT foo FROM bar');

/* Bir PDOStatement nesnesi daha oluşturalım*/
$otherStmt = $dbh->prepare('SELECT foobaz FROM foobar');

/* İlkini çalıştıralım */
$stmt->execute();

/* İlk satırı alalım */
$stmt->fetch();

/* Bazı sürücüler bu çağrıyı gerektirir */
$stmt->closeCursor();

/* Artık ikinci deyimi çalıştırabiliriz */
$otherStmt->execute();
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
