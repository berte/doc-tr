<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: ec2fe9a592f794978114ef5021db9f1d00c2e05d Maintainer: nilgun Status: ready -->
<refentry xml:id="reflectionproperty.getvalue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionProperty::getValue</refname>
  <refpurpose>Özelliğin değerini döndürür</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
<methodsynopsis role="ReflectionProperty">
   <modifier>public</modifier> <type>mixed</type><methodname>ReflectionProperty::getValue</methodname>
   <methodparam choice="opt"><type class="union"><type>object</type><type>null</type></type><parameter>nesne</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Özelliğin değerini döndürür.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>nesne</parameter></term>
     <listitem>
      <para>
       Özellik statik olmayan bir nesne ise özelliğin ait olduğu nesne
       burada belirtilmelidir.
       Bir nesne belirtmeden öntanımlı özellik döndürülmek istenirse bu yöntem
       yerine <methodname>ReflectionClass::getDefaultProperties</methodname>
       yöntemi kullanılmalıdır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Özelliğin değeri.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.1.0</entry>
      <entry>
       Private ve protected özellikler
       <methodname>ReflectionProperty::getValue</methodname> tarafından hemen
       erişilebilir olur. Evvelce erişilebilir olmaları için
       <methodname>ReflectionProperty::setAccessible</methodname> çağrısı
       yapmak gerekirdi; özellik erişilebilir değilse
       <classname>ReflectionException</classname> istisnası oluşurdu.
      </entry>
     </row>
     <row>
      <entry>8.0.0</entry>
      <entry>
       <parameter>nesne</parameter> artık &null; olabiliyor.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <methodname>ReflectionProperty::getValue</methodname> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static $staticProperty = 'foobar';

    public $property = 'barfoo';
    protected $privateProperty = 'foofoo';
}

$reflectionClass = new ReflectionClass('Foo');

var_dump($reflectionClass->getProperty('staticProperty')->getValue());
var_dump($reflectionClass->getProperty('property')->getValue(new Foo));

$reflectionProperty = $reflectionClass->getProperty('privateProperty');
$reflectionProperty->setAccessible(true); // yalnızca PHP 8.1.0 öncesi
var_dump($reflectionProperty->getValue(new Foo));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(6) "foobar"
string(6) "barfoo"
string(6) "foofoo"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionProperty::getName</methodname></member>
    <member><methodname>ReflectionProperty::setValue</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
