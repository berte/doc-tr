<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 55956ac4e20a87375de1fb5888ebb97f18c827db Maintainer: nilgun Status: ready -->
<chapter xml:id="language.fibers" xmlns="http://docbook.org/ns/docbook">
 <title>Fiberler</title>

 <simplesect xml:id="language.fibers.overview">
  <title>Fiberlere giriş</title>
  <?phpdoc print-version-for="fiber"?>
  <para>
   Fiberler, tamamen yığıtlanabilen ve yürütmeyi kesintiye uğratılabilen
   işlevlerdir. Fiberin çağrı yığıtının herhangi bir yerinde askıya alınmasıyla
   yürütmenin bekletilmesi ve daha sonra fiberin yürütmeyi kaldığı yerden devam
   ettirmesi sağlanabilir.
  </para>
  <para>
   Fiberler icra yığıtınını tamamını bekletebilir, böylece işlevin davranışını
   değiştirmek için işlevin doğrudan çağrılması gerekmez.
  </para>
  <para>
   <methodname>Fiber::suspend</methodname> çağrısı ile çağrı yığıtının
   herhangi bir yerinde yürütme kesintiye uğratılabilir (yani,
   <methodname>Fiber::suspend</methodname> oldukça iç içe çağrıların
   derinlerinde yer alabileceği gibi hiçbir yerde de var olmayabilir).
  </para>
  <para>
   Yığıtsız üreteçlerin (<classname>Generator</classname>) tersine, her
   <classname>Fiber</classname> sınıfının kendi çağrı yığıtı vardır. Böylece,
   oldukça iç içe işlev çağrılarında bile bekletme sağlanabilmektedir. Bir
   kesinti noktası belirten bir işlev (yani,
   <methodname>Fiber::suspend</methodname> çağrısı),
   <methodname>Fiber::suspend</methodname> dönüş türünün değiştirilmemesini
   gerektirir (bir <classname>Generator</classname> örneğinden dönen &yield;
   deyimini kullanan bir işlevin tersine).
  </para>
  <para>
   Fiberler PHP VM içinden çağrılanlar dahil, <function>array_map</function>
   işlevine sağlanan işlevler veya <classname>Iterator</classname> nesnesi
   üzerinde foreach ile çağrılan yöntemler gibi, herhangi bir işlev çağrısını
   askıya alabilir.
  </para>
  <para>
   Bir kere askıya alınınca, <methodname>Fiber::resume</methodname> işlevi
   herhangi bir değerle çağrılarak veya <methodname>Fiber::throw</methodname>
   kullanarak fiber içinde bir istisna yavrulatarak, fiber yürütmesi kaldığı
   yerden devam ettirilebilir. Değer, <methodname>Fiber::suspend</methodname>
   yönteminden veya yavrulanan istisnadan döndürülür.
  </para>
  <note>
   <simpara>
    Geçerli sınırlamalar nedeniyle, bir nesnenin yıkıcısında fiberler arasında
    seçim yapmak mümkün değildir.
   </simpara>
  </note>

  <example xml:id="language.fiber.example.basic"><!-- {{{ -->
   <title>- Temel kullanım örneği</title>
   <programlisting role="php">
    <![CDATA[
<?php
$fiber = new Fiber(function (): void {
   $value = Fiber::suspend('fiber');
   echo "Fiberi devam ettirmekte kullanılan değer: ", $value, PHP_EOL;
});
$value = $fiber->start();
echo "Fiber askıya alındığındaki değer: ", $value, PHP_EOL;
$fiber->resume('test');
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
    <![CDATA[
Fiber askıya alınırken kullanılan değer: fiber
Fiberi devam ettirmekte kullanılan değer: test
]]>
   </screen>
  </example><!-- }}} -->

 </simplesect>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
