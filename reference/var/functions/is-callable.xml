<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 83a17a7324c2597bd6385148abf19f76127229f5 Maintainer: nilgun Status: ready -->
<refentry xml:id="function.is-callable" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>is_callable</refname>
  <refpurpose>Bir değişkenin değerinin bir işlev olarak çağrılabilirliğini
  doğrular</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>is_callable</methodname>
   <methodparam><type>mixed</type><parameter>değer</parameter></methodparam>

   <methodparam choice="opt"><type>bool</type><parameter>sözdizimsel</parameter><initializer>&false;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter role="reference">isim</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
  <parameter>değer</parameter> <type>callable</type> türündeyse &true; döner.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>değer</parameter></term>
     <listitem>
      <para>
       Bir işlev ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sözdizimsel</parameter></term>
     <listitem>
      <para>
       &true; atanırsa <parameter>işlev</parameter> bağımsız değişkeninde bir
       işlev veya yöntem ismi belirtildiği varsayımıyla doğrulama yapılmaya
       çalışılır. Sadece dizge olmayan veya bir geriçağırım işlevi olarak
       kullanılabilecek geçerli bir yapıya sahip olmayan bir dizi içeren basit
       değişkenler reddedilir. Geçerli bir dizinin 2 girdisi olacağı
       varsayılır; ilki bir nesne veya bir dizge, ikincisi ise bir dizge.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>isim</parameter></term>
     <listitem>
      <para>
       İşlev veya yöntemin çağrılabilir ismi. Aşağıdaki örnekteki
       "birSınıf::birYöntem" gibi. birSınıf::birYöntem() çağrılabilir bir
       duruk yöntem olsa da bunun hep böyle olması gerekmez.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Belirtilen <parameter>değer</parameter> bir işlev olarak çağrılabiliyorsa &true;, aksi takdirde &false; döner.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>is_callable</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
//  Bir  değişkenin içeriğinin bir işlev olarak
//  çağrılabilirliğinin sınanması.

//
//  Bir işlev içeren basit bir değişken
//

function bir_işlev()
{
}

$işlevDeğişkeni = 'bir_işlev';

var_dump(is_callable($işlevDeğişkeni, false, $isim));  // bool(true)

echo $isim, "\n";  // bir_işlev

//
//  Bir yöntem içeren bir dizi
//

class birSınıf {

  function birYöntem()
  {
  }

}

$birNesne = new birSınıf();

$yöntemDeğişkeni = array($birNesne, 'birYöntem');

var_dump(is_callable($yöntemDeğişkeni, true, $isim));  //  bool(true)

echo $isim, "\n";  //  birSınıf::birYöntem

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>- <function>is_callable</function> ve kurucular</title>
    <simpara>
     <function>is_callable</function> kurucuları çağrılabilir saymaz.
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php

class Foo
{
    public function __construct() {}
    public function foo() {}
}

var_dump(
    is_callable(array('Foo', '__construct')),
    is_callable(array('Foo', 'foo'))
);
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(false)
bool(false)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
 &reftitle.notes;
 <simplelist>
  <member>
   Bir nesne <link linkend="object.invoke">__invoke()</link> örnekliyorsa
   nesne ismi çağrılabilirdir ve geçerli etki alanında görünür olur.
  </member>
  <member>
   Bir sınıf <link linkend="object.callstatic">__callStatic()</link>
   örnekliyorsa sınıf ismi çağrılabilirdir.
  </member>
  <member>
   Bir nesne <link linkend="object.call">__call()</link> örnekliyorsa, nesne
   ismi çağrılabilirdir ve nesne üzerindeki her yöntem için, yöntem
   tanımlanmamış olsa bile &true; döndürür.
  </member>
  <member>
   Bir çağrılabilir, sınıfın ismiyle çağrılırsa otomatik yüklemeyi
   tetikleyebilir.
  </member>
 </simplelist>
</refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>function_exists</function></member>
    <member><function>method_exists</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
