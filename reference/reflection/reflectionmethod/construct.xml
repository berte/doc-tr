<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 967b4787bab600be8f96129d4960ad60f47f31e7 Maintainer: nilgun Status: ready -->
<refentry xml:id="reflectionmethod.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionMethod::__construct</refname>
  <refpurpose>Yeni bir <classname>ReflectionMethod</classname> nesnesi oluşturur</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>ReflectionMethod::__construct</methodname>
   <methodparam><type class="union"><type>object</type><type>string</type></type><parameter>objectOrMethod</parameter></methodparam>
   <methodparam><type>string</type><parameter>method</parameter></methodparam>
  </constructorsynopsis>
  <simpara>Diğer sözdizimi (isimli bağımsız değişkenler desteklenmiyor):</simpara>
  <constructorsynopsis>
   <modifier>public</modifier> <methodname>ReflectionMethod::__construct</methodname>
   <methodparam><type>string</type><parameter>classMethod</parameter></methodparam>
  </constructorsynopsis>
  <para>
   Yeni bir <classname>ReflectionMethod</classname> nesnesi oluşturur.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>objectOrMethod</parameter></term>
     <listitem>
      <para>
       Yöntemi içeren nesne (sınıf örneği) veya sınıf ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>method</parameter></term>
     <listitem>
      <para>
       Yöntemin adı.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>classMethod</parameter></term>
     <listitem>
      <para>Sözdizimi:
       <emphasis>SınıfAdı</emphasis><literal>::</literal><emphasis>yöntemAdı</emphasis>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Belirtilen yöntem mevcut değilse
   bir <classname>ReflectionException</classname> yavrulanır.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <methodname>ReflectionMethod::__construct</methodname> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
class Sayaç
{
    private static $c = 0;

    /**
     * Artan sayaç
     *
     * @final
     * @static
     * @access  public
     * @return  int
     */
    final public static function arttır()
    {
        return ++self::$c;
    }
}

// ReflectionMethod sınıfının yeni bir örneğini oluşturalım
$method = new ReflectionMethod('Sayaç', 'arttır');

// Temel bilgileri basalım
printf(
    "===> %s%s%s%s%s%s%s '%s' yöntemi (%s)\n" .
    "     %s dosyasının\n" .
    "     %d. satırından %d. satırına kadar\n" .
    "     %d[%s] değiştiriciyle tanımlanmış.\n",
        $method->isInternal() ? 'Yerleşik' : 'Kullanıcı tanımlı',
        $method->isAbstract() ? ' abstract' : '',
        $method->isFinal() ? ' final' : '',
        $method->isPublic() ? ' public' : '',
        $method->isPrivate() ? ' private' : '',
        $method->isProtected() ? ' protected' : '',
        $method->isStatic() ? ' static' : '',
        $method->getName(),
        $method->isConstructor() ? 'bir kurucu' : 'sıradan bir yöntem',
        $method->getFileName(),
        $method->getStartLine(),
        $method->getEndline(),
        $method->getModifiers(),
        implode(' ', Reflection::getModifierNames($method->getModifiers()))
);

// Belgelendirici açıklamaları basalım
printf("---> Belgeleme:\n %s\n", var_export($method->getDocComment(), true));

// Varsa duruk değişkenleri basalım
if ($statics= $method->getStaticVariables()) {
    printf("---> Duruk değişkenler: %s\n", var_export($statics, true));
}

// Yöntemi çağıralım
printf("---> Çağrı sonuçları: ");
var_dump($method->invoke(NULL));
?>]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
===> Kullanıcı tanımlı final public static 'arttır' yöntemi (sıradan bir yöntem)
     /home/nilgun/dnm.php dosyasının
     14. satırından 17. satırına kadar
     49[final public static] değiştiriciyle tanımlanmış.
---> Belgeleme:
 '/**
     * Artan sayaç
     *
     * @final
     * @static
     * @access  public
     * @return  int
     */'
---> Çağrı sonuçları: int(1)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>ReflectionMethod::export</methodname></member>
    <member><link linkend="language.oop5.decon.constructor">Kurucular</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
