<?xml version="1.0" encoding="UTF-8"?>
<!-- EN-Revision: 5832a97c699c5e1bc808ee900447fe751af0d540 Maintainer: onurozgurozkan Status: ready -->
<refentry xml:id="function.call-user-func-array" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>call_user_func_array</refname>
  <refpurpose>Bağımsız değişkenlerin bir dizi olarak verildiği geriçağırım işlevini
  çağırır</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>call_user_func_array</methodname>
   <methodparam><type>callable</type><parameter>işlev</parameter></methodparam>
   <methodparam><type>array</type><parameter>bağımsız_değişken_dizisi</parameter></methodparam>
  </methodsynopsis>
  <para>
    <parameter>bağımsız_değişken_dizisi</parameter> içindeki bağımsız değişkenleri
    kullanarak kullanıcının tanımladığı <parameter>işlev</parameter>
    işlevini çağırır.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>işlev</parameter></term>
     <listitem>
      <para>
       Çağrılacak işlev.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>bağımsız_değişken_dizisi</parameter></term>
     <listitem>
      <para>
       İşleve dizi olarak aktarılacak bağımsız değişkenler.
      </para>
      <para>
       <parameter>bağımsız_değişken_dizisi</parameter>'nin anahtarlarının
       hepsi sayılardan oluşuyorsa bunlar yok sayılır ve her eleman
       <parameter>işlev</parameter>'e konumsal sırasıyla aktarılır.
      </para>
      <para>
       <parameter>bağımsız_değişken_dizisi</parameter>'nin anahtarlarının
       hepsi dizgelerden oluşuyorsa her eleman <parameter>işlev</parameter>'e
       anahtarı ile isimlendirilerek isimli bağımsız değişken olarak aktarılır.
      </para>
      <para>
       <parameter>bağımsız_değişken_dizisi</parameter>'nin anahtarlarının
       kısmen sayı kısmen dizge indisli olması veya isimlerden herhangi
       birinin <parameter>işlev</parameter>'in bağımsız değişken isimleri
       ile eşleşmemesi ölümcül hata ile sonuçlanır.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Bir hata oluşmamışsa işlevin dönüş değerini, aksi takdirde &false;
   döndürür.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>bağımsız_değişken_dizisi</parameter> anahtarları artık bağımsız değişken
        ismi olarak yorumlanıyor, evvelce sessizce yok sayılırdı.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>call_user_func_array</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
function foobar($arg, $arg2) {
    echo __FUNCTION__, " got $arg and $arg2\n";
}

class foo {
    function bar($arg, $arg2) {
        echo __METHOD__, " got $arg and $arg2\n";
    }
}
// foobar() işlevini iki bağımsız değişken ile çağıralım
call_user_func_array("foobar", array("one", "two"));

// $foo->bar() yöntemini iki bağımsız değişken ile çağıralım
$foo = new foo;
call_user_func_array(array($foo, "bar"), array("three", "four"));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
foobar got one and two
foo::bar got three and four
]]>
    </screen>
   </example>

   <example>
    <title>- İsim alanı ismi kullanarak
    <function>call_user_func_array</function></title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Mesela;

class Misal {
    static public function dnm($isim) {
        print "Merhaba {$isim}!\n";
    }
}

call_user_func_array(__NAMESPACE__ .'\Misal\dnm', array('Ozan'));

call_user_func_array(array(__NAMESPACE__ .'\Misal', 'dnm'), array('Özgür'));
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Merhaba Ozan!
Merhaba Özgür!
]]>
    </screen>
   </example>
   <example>
    <title>- Lamda işlevi kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php

$işlev = function($dğş1, $dğş2) {
    return $dğş1 * $dğş2;
};

var_dump(call_user_func_array($işlev, array(2, 4)));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(8)
]]>
    </screen>
   </example>
   <example>
    <title>- Değerlerin gönderimli aktarılması</title>
    <programlisting role="php">
<![CDATA[
<?php

function mega(&$a){
    $a = 55;
    echo "function mega \$a=$a\n";
}
$bar = 77;
call_user_func_array('mega',array(&$bar));
echo "global \$bar=$bar\n";

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
function mega $a=55
global $bar=55
]]>
    </screen>
   </example>
   <example>
    <title>- İsimli bağımsız değişkenli <code>call_user_func_array</code> kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
function biriki($birinci, $ikinci) {
    echo __FUNCTION__, " $birinci ve $ikinci alındı\n";
}

// biriki() işlevini farklı sırada isimli değişkenlerle çağır
call_user_func_array("biriki", array("ikinci" => "iki", "birinci" => "bir"));

// çağrıda biriki() işlevinin bağımsız değişkenlerinden biri isimli olsun
call_user_func_array("biriki", array("foo", "ikinci" => "bar"));

// Ölümcül hata: Konumsal değişken isimli değişkenden sonra kullanılamaz
call_user_func_array("biriki", array("birinci" => "bir", "bar"));

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
biriki bir ve iki alındı
biriki foo ve bar alındı
PHP Fatal error:  Uncaught Error: Cannot use positional argument after named argument
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.func-callback-exceptions;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>call_user_func</function></member>
    <member><methodname>ReflectionFunction::invokeArgs</methodname></member>
    <member><methodname>ReflectionMethod::invokeArgs</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
