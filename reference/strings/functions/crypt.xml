<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 2526581912be11d14da7006fba344ca525a8566a Maintainer: nilgun Status: ready -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.crypt">
 <refnamediv>
  <refname>crypt</refname>
  <refpurpose>Tek yönlü dizge aşlama</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &note.not-bin-safe;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>crypt</methodname>
   <methodparam><type>string</type><parameter>dizge</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>tuz</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>crypt</function> işlevi standart Unix <abbrev>DES</abbrev>
   şifreleme algoritmasını veya sistemdeki uygun algoritmalardan birini
   kullanarak <parameter>dizge</parameter> dizgesinin aşlanmış sürümünü
   döndürür.
   <function>password_verify</function> işlevi <function>crypt</function>
   işlevi ile uyumludur. Bu bakımdan <function>crypt</function> ile
   oluşturulan parola aşları <function>password_verify</function> ile
   kullanılabilir.
  </para>
  <para>
   PHP 8.0.0 öncesinde <parameter>tuz</parameter> değiştirgesi isteğe
   bağlıydı. Bununla birlikte, <function>crypt</function> tuzsuz zayıf
   bir aş oluşturur ve bu durumda bir <constant>E_NOTICE</constant>
   seviyesinde bir hatası üretir. Daha iyi güvenlik için yeterince güçlü
   bir tuz belirlemek gerekir.
  </para>
  <para>
   <function>password_hash</function> güçlü bir aş kullanır, güçlü bir tuz
   üretir ve uygun turları otomatik olarak uygular.
   <function>password_hash</function> basit bir <function>crypt</function>
   sarmalayıcısıdır ve mevcut parola aşlarıyla uyumludur.
   <function>password_hash</function> kullanmak daha güvenlidir ve önerilir.
  </para>
  <para>
   Aş türü <parameter>tuz</parameter> değiştirgesiyle tetiklenir.
   <parameter>tuz</parameter> belirtilmemişse ya standart iki karakterlik (DES)
   ya da MD5 şifrelemesinin varlığına bağlı olarak oniki karakterlik tuz otomatik
   olarak üretilir. PHP, kullanılabilecek aşlar tarafından izin verilen geçerli
   en uzun tuzu belirleyen <constant>CRYPT_SALT_LENGTH</constant> adında bir
   sabit içerir.
  </para>
  <para>
   Standart DES şifrelemesinde <function>crypt</function> işlevi tuz olarak
   çıktının ilk iki karakterini döndürür. Ayrıca, dizgenin sadece ilk sekiz
   karakterini kullanır, bu nedenle ilk sekiz karakteri aynı olan sekiz
   karakterden daha uzun dizgeler için tuz aynı olduğu sürece hep aynı sonucu
   üretir.
  </para>
  <simpara>
   Desteklenen aş türleri:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <constant>CRYPT_STD_DES</constant> - "./0-9A-Za-z" kalıbından
     iki karakter içeren standart DES aşı. Tuzda geçersiz karakter kullanımı
     işlevin başarısız olmasına sebep olur.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_EXT_DES</constant> - Dokuz karakterlik tuz kullanan
     gelişkin DES aşı. "Tuz", bir alt çizginin ardından 4 karakterlik yineleme
     sayısı ve 4 karakterlik tuzdan oluşan 9 karakterli bir dizedir. Bu 4
     karakterlik dizelerin herbiri 24 bitle kodlanır ve en düşük değerli
     karakter baştadır. <literal>0</literal> ila <literal>63</literal>
     arasındaki değerler <literal>./0-9A-Za-z</literal> kalıbından kodlanmıştır.
     Tuzda geçersiz karakter kullanımı, işlevin başarısız olmasına sebep olur.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_MD5</constant> - $1$ ile başlayan on iki karakterlik MD5
     aşı.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_BLOWFISH</constant> - Tuzlu blowfish aşı şöyle oluşur:
     "$2a$", "$2x$" veya "$2y$", iki basamaklı bir bedel değiştirgesi,
     "$" ve "./0-9A-Za-z" kalıbından 22 karakter. Tuzda bu aralığın dışındaki
     karakterlerin kullanılması, işlevin sıfır uzunluklu bir dize döndürmesine
     sebep olur. İki basamaklı bedel değiştirgesi, temel Blowfish tabanlı
     aşlama algoritması için yineleme sayımının 2'lik tabanda logaritmasıdır
     ve 04-31 aralığında olmalıdır; bu aralığın dışındaki değerler işlevin
     başarısız olmasına sebep olur. "$2x$" aşları görece zayıftır; "$2a$"
     aşları uyumludur ve bu zayıflığı azaltır. Yeni aşlar için "$2y$"
     kullanılmalıdır.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA256</constant> - SHA-256 aşı, $5$ ile başlayan
     onaltı karakterlik bir tuza sahiptir. Tuz dizesi 'rounds=&lt;N&gt;$'
     ile başlıyorsa, N'nin sayısal değeri, Blowfish'teki bedel değiştirgesine
     benzer şekilde, aşlama döngüsündeki tur sayısını belirtmek için
     kullanılır. Öntanımlı tur sayısı 5000'dir, en az 1000 ve en çok
     999.999.999'dur. Bu aralığın dışında bir N seçilirse en yakın sınır
     değer kullanılır.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA512</constant> - SHA-512 aşı, $6$ ile başlayan
     onaltı karakterlik bir tuza sahiptir. Tuz dizesi 'rounds=&lt;N&gt;$'
     ile başlıyorsa, N'nin sayısal değeri, Blowfish'teki bedel değiştirgesine
     benzer şekilde, aşlama döngüsündeki tur sayısını belirtmek için
     kullanılır. Öntanımlı tur sayısı 5000'dir, en az 1000 ve en çok
     999.999.999'dur. Bu aralığın dışında bir N seçilirse en yakın sınır
     değer kullanılır.
     </simpara>
    </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>dizge</parameter></term>
     <listitem>
      <para>
       Aşlanacak dizge.
      </para>
      <caution>
       <para>
        <constant>CRYPT_BLOWFISH</constant> algoritmasının kullanımı,
        <parameter>dizge</parameter> değiştirgesinin 72 bayt uzunlukta
        kırpılmasına sebep olur.
       </para>
      </caution>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tuz</parameter></term>
     <listitem>
      <para>
       Aşlamaye göre değişen tuz dizgesi. Belirtilmezse,
       davranış algoritma gerçeklenimi tarafından tanımlanır ve beklenmedik
       sonuçlara yol açabilir.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Aşlama uygulanmış dizge veya 13 karakterden daha kısa olan ve başarısızlık
   durumunda tuzdan farklı olacağı garanti edilen bir dizge döndürür.
  </para>
  <warning>
   <simpara>
    Parolalar doğrulanırken, <function>crypt</function> çıktısını önceden
    bilinen aş ile karşılaştırmak için zamanlama saldırılarına açık olmayan
    bir dizge karşılaştırma işlevi kullanılmalıdır. PHP'de bu kullanım için
    <function>hash_equals</function> işlevi bulunur.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>tuz</parameter> değiştirgesi artık isteğe bağlı değil.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>crypt</function> örnekleri</title>
    <programlisting role="php">
<![CDATA[
<?php
$aşlıParola = crypt('parolam');
// Tuzu PHP üretsin; önerilmez

/* Parola karşılaştırmasında, farklı şifreleme algoritmaları ile ilgili
   sorunlardan kaçınmak için crypt() sonucunun tamamını tuz olarak işleve
   aktarmalısınız. (Yukarıda belirtildiği gibi standart DES parola aşları
   2 karakterlik tuz kullanırken MD5 parola özetleri 12 karakterlik tuz
   kullanır.) */
if (hash_equals($özetliParola, crypt($kullanıcı_girdisi, $aşlıParola))) {
   echo "Parola doğru!";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>- htpasswd ile <function>crypt</function> kullanımı</title>
    <programlisting role="php">
<![CDATA[
<?php
// Parolayı tanmılayalım
$parola = 'parolam';

// Tuzu PHP üretsin ve bize parola aşını versin
$hash = crypt($parola);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>- <function>crypt</function> işlevinin farklı aş türleri ile
    kullanımı</title>
    <programlisting role="php">
<![CDATA[
+/* Bu tuzlar sadece örnektir. Asla bire bir kullanılmamalıdır.
+   Her parola için ayrı üretilmiş, iyi biçimlenmiş bir tuz kullanılmalıdır.
+*/
+echo 'Standard DES: ',
+    crypt('rasmuslerdorf', 'rl'),
+    "\n";
+echo 'Gelişkin DES: ',
+    crypt('rasmuslerdorf', '_J9..rasm'),
+    "\n";
+echo 'MD5:          ',
+    crypt('rasmuslerdorf', '$1$rasmusle$'),
+    "\n";
+echo 'Blowfish:     ',
+    crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$'),
+    "\n";
+echo 'SHA-256:      ',
+    crypt('rasmuslerdorf', '$5$rounds=5000$usesomesillystringforsalt$'),
+    "\n";
+echo 'SHA-512:      ',
+    crypt('rasmuslerdorf', '$6$rounds=5000$usesomesillystringforsalt$'),
+    "\n";
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Standart DES: rl.3StKT.4T8M
Gelişkin DES: _J9..rasmBYk8r9AiWNc
MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0
+Blowfish:     $2y$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi
SHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6
SHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    <function>crypt</function> tek yönlü algoritma kullandığından tekrar özgün
    dizgeyi elde etmenizi sağlayacak bir işlev yoktur.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash_equals</function></member>
    <member><function>password_hash</function></member>
    <member><function>md5</function></member>
    <member><link xlink:href="http://belgeler.gen.tr/man/man3/man3-crypt.html">
    crypt işlevinin Unix kılavuz sayfası</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
